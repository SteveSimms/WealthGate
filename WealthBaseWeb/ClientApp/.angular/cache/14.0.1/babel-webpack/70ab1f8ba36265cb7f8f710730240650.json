{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/toolbar\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/sidenav\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/list\";\n\nfunction MatNavComponent_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MatNavComponent_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(2);\n\n      return i0.ɵɵresetView(_r0.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 8);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = function () {\n  return [\"/\"];\n};\n\nconst _c1 = function () {\n  return [\"/trade\"];\n};\n\nexport class MatNavComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n}\n\nMatNavComponent.ɵfac = function MatNavComponent_Factory(t) {\n  return new (t || MatNavComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nMatNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatNavComponent,\n  selectors: [[\"app-mat-nav\"]],\n  decls: 21,\n  vars: 16,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [1, \"nav-link\", \"text-dark\", 3, \"routerLink\"], [\"mat-list-item\", \"\", \"href\", \"#\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function MatNavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0)(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵtext(7, \"Menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-nav-list\")(9, \"a\", 3);\n      i0.ɵɵtext(10, \"Home\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 3);\n      i0.ɵɵtext(12, \"Trading\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 4);\n      i0.ɵɵtext(14, \"Assets \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"mat-sidenav-content\")(16, \"mat-toolbar\", 5);\n      i0.ɵɵtemplate(17, MatNavComponent_button_17_Template, 3, 0, \"button\", 6);\n      i0.ɵɵpipe(18, \"async\");\n      i0.ɵɵelementStart(19, \"span\");\n      i0.ɵɵtext(20, \"WealthBaseWeb\");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 8, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(5, 10, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 6, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(14, _c0));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(15, _c1));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(18, 12, ctx.isHandset$));\n    }\n  },\n  dependencies: [i2.NgIf, i3.RouterLinkWithHref, i4.MatToolbar, i5.MatButton, i6.MatSidenav, i6.MatSidenavContainer, i6.MatSidenavContent, i7.MatIcon, i8.MatNavList, i8.MatListItem, i2.AsyncPipe],\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n      height: 10%;\\n    }\\n\\n    .sidenav[_ngcontent-%COMP%] {\\n      width: 200px;\\n    }\\n\\n    .sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n      background: inherit;\\n    }\\n\\n    .mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n      position: sticky;\\n      top: 0;\\n      z-index: 1;\\n    }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdC1uYXYuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFDSTtNQUNFLFdBQVc7SUFDYjs7SUFFQTtNQUNFLFlBQVk7SUFDZDs7SUFFQTtNQUNFLG1CQUFtQjtJQUNyQjs7SUFFQTtNQUNFLGdCQUFnQjtNQUNoQixNQUFNO01BQ04sVUFBVTtJQUNaIiwiZmlsZSI6Im1hdC1uYXYuY29tcG9uZW50LnRzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLnNpZGVuYXYtY29udGFpbmVyIHtcbiAgICAgIGhlaWdodDogMTAlO1xuICAgIH1cblxuICAgIC5zaWRlbmF2IHtcbiAgICAgIHdpZHRoOiAyMDBweDtcbiAgICB9XG5cbiAgICAuc2lkZW5hdiAubWF0LXRvb2xiYXIge1xuICAgICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICB9XG5cbiAgICAubWF0LXRvb2xiYXIubWF0LXByaW1hcnkge1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHRvcDogMDtcbiAgICAgIHotaW5kZXg6IDE7XG4gICAgfVxuXG4gICJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAA6BA,WAA7B,QAAgD,qBAAhD;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;;;;;;;;;;;;;;IAqBUC;IAIEA;MAAAA;MAAAA;;MAAA;;MAAA,OAASA,4BAAT;IAAwB,CAAxB;IAEAA;IAA4CA;IAAIA;;;;;;;;;;;;AA8B5D,OAAM,MAAOC,eAAP,CAAsB;EAQ1BC,YAAoBC,kBAApB,EAA0D;IAAtC;IANpB,kBAAkC,KAAKA,kBAAL,CAAwBC,OAAxB,CAAgCP,WAAW,CAACQ,OAA5C,EAC/BC,IAD+B,CAE9BR,GAAG,CAACS,MAAM,IAAIA,MAAM,CAACC,OAAlB,CAF2B,EAG9BT,WAAW,EAHmB,CAAlC;EAM8D;;AARpC;;;mBAAfE,iBAAeD;AAAA;;;QAAfC;EAAeQ;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MApDxBb,iDAAiD,CAAjD,EAAiD,aAAjD,EAAiD,CAAjD,EAAiD,CAAjD;;;;MAKIA;MAAaA;MAAIA;MACjBA,qCAAc,CAAd,EAAc,GAAd,EAAc,CAAd;MACqDA;MAAIA;MACvDA;MACCA;MAAOA;MAERA;MAA0BA;MAAOA;MAGrCA,6CAAqB,EAArB,EAAqB,aAArB,EAAqB,CAArB;MAEIA;;MAQAA;MAAMA;MAAaA;;;;MArBnBA;MAAAA,8EAA+C,QAA/C,EAA+CA,+CAA/C;MADAA;MAK8BA;MAAAA;MACAA;MAAAA;MAa3BA;MAAAA","names":["Breakpoints","map","shareReplay","i0","MatNavComponent","constructor","breakpointObserver","observe","Handset","pipe","result","matches","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/steve/Code/WealthGate/WealthBaseWeb/ClientApp/src/app/mat-nav/mat-nav.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-mat-nav',\n  template: `\n    <mat-sidenav-container class=\"sidenav-container\">\n      <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n          [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n          [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n          [opened]=\"(isHandset$ | async) === false\">\n        <mat-toolbar>Menu</mat-toolbar>\n        <mat-nav-list>\n          <a class=\"nav-link text-dark\" [routerLink]=\"['/']\">Home</a>\n          <a class=\"nav-link text-dark\" [routerLink]=\"['/trade']\"\n          >Trading</a\n          >\n          <a mat-list-item href=\"#\">Assets </a>\n        </mat-nav-list>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <mat-toolbar color=\"primary\">\n          <button\n            type=\"button\"\n            aria-label=\"Toggle sidenav\"\n            mat-icon-button\n            (click)=\"drawer.toggle()\"\n            *ngIf=\"isHandset$ | async\">\n            <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n          </button>\n          <span>WealthBaseWeb</span>\n        </mat-toolbar>\n        <!-- Add Content Here -->\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n\n  `,\n  styles: [`\n    .sidenav-container {\n      height: 10%;\n    }\n\n    .sidenav {\n      width: 200px;\n    }\n\n    .sidenav .mat-toolbar {\n      background: inherit;\n    }\n\n    .mat-toolbar.mat-primary {\n      position: sticky;\n      top: 0;\n      z-index: 1;\n    }\n\n  `]\n})\nexport class MatNavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n"]},"metadata":{},"sourceType":"module"}